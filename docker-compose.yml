version: '3.8'

services:
  # PostgreSQL 데이터베이스 서비스
  postgres:
    image: postgres:15-alpine
    container_name: quiz-postgres
    environment:
      POSTGRES_DB: quiz_db
      POSTGRES_USER: quizuser
      POSTGRES_PASSWORD: quizpass
      # 타임존 설정 - 한국 시간 사용
      TZ: Asia/Seoul
    ports:
      - "5432:5432"
    volumes:
      # 데이터 영속성을 위한 볼륨 설정
      - postgres_data:/var/lib/postgresql/data
      # 초기화 스크립트 디렉토리 마운트
      - ./sql:/docker-entrypoint-initdb.d
    healthcheck:
      # 데이터베이스 헬스체크 설정
      test: ["CMD-SHELL", "pg_isready -U quizuser -d quiz_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quiz-network

  # Redis 캐시 서비스
  redis:
    image: redis:7-alpine
    container_name: quiz-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quiz-network

  # # Elasticsearch 검색 엔진
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
  #   container_name: quiz-elasticsearch
  #   environment:
  #     - node.name=quiz-es01
  #     - cluster.name=quiz-es-cluster
  #     - discovery.type=single-node
  #     - bootstrap.memory_lock=true
  #     - xpack.security.enabled=false
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   volumes:
  #     - elasticsearch_data:/usr/share/elasticsearch/data
  #   ports:
  #     - "9200:9200"
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:9200"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   networks:
  #     - quiz-network

  # Spring Boot 백엔드 서비스
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: quiz-backend
    restart: always
    ports:
      - "8080:8080"

    env_file: .env
    environment:
      # 프로필 설정 - 운영 환경(prod)으로 변경
      SPRING_PROFILES_ACTIVE: prod
      # 타임존 설정
      TZ: Asia/Seoul
      # OAuth2 환경 변수
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      KAKAO_CLIENT_ID: ${KAKAO_CLIENT_ID}
      KAKAO_CLIENT_SECRET: ${KAKAO_CLIENT_SECRET}
      OAUTH2_AUTHORIZED_REDIRECT_URI: https://ec2-13-125-187-28.ap-northeast-2.compute.amazonaws.com/oauth2/redirect
      # JWT 시크릿 키 설정
      JWT_SECRET: ${JWT_SECRET:-abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      # elasticsearch:
      #   condition: service_healthy
    networks:
      - quiz-network

  # Next.js 프론트엔드 서비스 (신버전)
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_BASE_URL: https://ec2-13-125-187-28.ap-northeast-2.compute.amazonaws.com
        NEXT_PUBLIC_WS_BASE_URL: wss://ec2-13-125-187-28.ap-northeast-2.compute.amazonaws.com/ws-battle
    container_name: quiz-frontend
    restart: always
    expose:
      - "3000"
    environment:
      # Next.js 환경 변수 - 내부 Docker 네트워크와 외부 접근 분리
      NEXT_PUBLIC_API_BASE_URL: https://ec2-13-125-187-28.ap-northeast-2.compute.amazonaws.com
      API_BASE_URL: http://backend:8080  # 서버 사이드에서 사용할 내부 URL
      NEXT_PUBLIC_WS_BASE_URL: wss://ec2-13-125-187-28.ap-northeast-2.compute.amazonaws.com/ws-battle
      NODE_ENV: production
    depends_on:
      - backend
    networks:
      - quiz-network

  # HTTPS 설정을 위한 Nginx 리버스 프록시
  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-root:/var/www/certbot
    depends_on:
      - frontend
      - backend
    networks:
      - quiz-network

  # Let's Encrypt Certbot
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-root:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email chae0738@naver.com --agree-tos --no-eff-email -d ec2-13-125-187-28.ap-northeast-2.compute.amazonaws.com

volumes:
  postgres_data:
  redis_data:
  certbot-etc:
  certbot-var:
  web-root:
  # elasticsearch_data:

networks:
  quiz-network:
    driver: bridge