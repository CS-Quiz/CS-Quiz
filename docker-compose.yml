version: '3.8'

services:
  # PostgreSQL 데이터베이스 서비스
  postgres:
    image: postgres:15-alpine
    container_name: quiz-postgres
    environment:
      POSTGRES_DB: quiz_db
      POSTGRES_USER: quizuser
      POSTGRES_PASSWORD: quizpass
      # 타임존 설정 - 한국 시간 사용
      TZ: Asia/Seoul
    ports:
      - "5432:5432"
    volumes:
      # 데이터 영속성을 위한 볼륨 설정
      - postgres_data:/var/lib/postgresql/data
      # 초기화 스크립트 디렉토리 마운트
      - ./sql:/docker-entrypoint-initdb.d
    healthcheck:
      # 데이터베이스 헬스체크 설정
      test: ["CMD-SHELL", "pg_isready -U quizuser -d quiz_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quiz-network

  # Redis 캐시 서비스
  redis:
    image: redis:7-alpine
    container_name: quiz-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - quiz-network

  # Spring Boot 백엔드 서비스
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: quiz-backend
    restart: always
    ports:
      - "8080:8080"  # 백엔드 직접 노출
    env_file: .env
    environment:
      # 프로필 설정 - 운영 환경(prod)으로 변경
      SPRING_PROFILES_ACTIVE: prod
      # 타임존 설정
      TZ: Asia/Seoul
      # OAuth2 환경 변수
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      KAKAO_CLIENT_ID: ${KAKAO_CLIENT_ID}
      KAKAO_CLIENT_SECRET: ${KAKAO_CLIENT_SECRET}
      OAUTH2_AUTHORIZED_REDIRECT_URI: http://ec2-13-125-187-28.ap-northeast-2.compute.amazonaws.com/api/oauth2/redirect
      # JWT 시크릿 키 설정
      JWT_SECRET: ${JWT_SECRET:-abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890}
      # HikariCP 설정
      SPRING_DATASOURCE_HIKARI_AUTO_COMMIT: false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - quiz-network

  # Next.js 프론트엔드 서비스 (신버전)
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_BASE_URL: http://ec2-13-125-187-28.ap-northeast-2.compute.amazonaws.com:8080
        NEXT_PUBLIC_WS_BASE_URL: ws://ec2-13-125-187-28.ap-northeast-2.compute.amazonaws.com:8080/ws-battle
    container_name: quiz-frontend
    restart: always
    expose:
      - "3000"
    environment:
      # Next.js 환경 변수 - 백엔드 직접 접근
      NEXT_PUBLIC_API_BASE_URL: http://ec2-13-125-187-28.ap-northeast-2.compute.amazonaws.com:8080
      API_BASE_URL: http://backend:8080  # 서버 사이드에서 사용할 내부 URL
      NEXT_PUBLIC_WS_BASE_URL: ws://ec2-13-125-187-28.ap-northeast-2.compute.amazonaws.com:8080/ws-battle
      NODE_ENV: production
    depends_on:
      - backend
    networks:
      - quiz-network

  # HTTP 전용 Nginx 리버스 프록시
  nginx-proxy:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx-temp.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend
    networks:
      - quiz-network

volumes:
  postgres_data:
  redis_data:

networks:
  quiz-network:
    driver: bridge