"use client";

import { useEffect } from "react";
import { useRouter } from "next/navigation";
import { useBattleSocketStore } from "@/store/battleStore";
import { useProfileStore } from "@/store/profileStore";
import battleWebSocketService from "@/lib/services/websocket/battleWebSocketService";
import {
  BattleWebSocketEvents,
  BattleSocketEventKey,
} from "@/lib/types/battle";

/**
 * ‚úÖ Î∞∞ÌãÄ WebSocketÏùÑ Ï¥àÍ∏∞ÌôîÌïòÍ≥† Ïù¥Î≤§Ìä∏Î•º ÏÉÅÌÉúÏóê Î∞òÏòÅÌïòÎäî ÌõÖ
 * @param roomId - ÌòÑÏû¨ Î∞∞ÌãÄ Î∞© ID
 */
export const useBattleSocket = (roomId: number) => {
  const userId = useProfileStore.getState().userProfile?.id;
  const router = useRouter();

  const {
    setParticipantsPayload,
    setStartPayload,
    setStatus,
    setProgress,
    setNextQuestion,
    setResult,
    setEndPayload,
    reset: resetStore,
    updateLastActivity,
  } = useBattleSocketStore();

  useEffect(() => {
    if (!roomId || !userId) return;

    const handleParticipants = (
      data: BattleWebSocketEvents[BattleSocketEventKey.PARTICIPANTS]
    ) => {
      console.log("üì• [PARTICIPANTS] Ï∞∏Í∞ÄÏûê Ï†ïÎ≥¥ ÏàòÏã†:", data);
      updateLastActivity();
      setParticipantsPayload({ ...data });
    };

    const handleReady = (
      data: BattleWebSocketEvents[BattleSocketEventKey.READY]
    ) => {
      console.log("‚úÖ [READY] Ï§ÄÎπÑ ÏÉÅÌÉú ÏàòÏã†:", data);
      updateLastActivity();

      // 1) ÌòÑÏû¨ Ï†ÄÏû•Îêú payload Í∞ÄÏ†∏Ïò§Í∏∞
      const prev = useBattleSocketStore.getState().participantsPayload;

      // 2) participants Î∞∞Ïó¥Îßå data.participantsÎ°ú ÍµêÏ≤¥
      setParticipantsPayload({
        ...prev,
        roomId: data.roomId,
        participants: data.participants,
      });
    };

    const handleStart = (
      data: BattleWebSocketEvents[BattleSocketEventKey.START]
    ) => {
      console.log("üöÄ [START] Î∞∞ÌãÄ ÏãúÏûë ÏàòÏã†:", data);
      updateLastActivity();
      setStartPayload(data);
      setTimeout(() => {
        router.push(`/battles/${roomId}/play`);
      }, 1000);
    };

    const handleStatus = (
      data: BattleWebSocketEvents[BattleSocketEventKey.STATUS]
    ) => {
      console.log("üì° [STATUS] ÏÉÅÌÉú Î≥ÄÍ≤Ω ÏàòÏã†:", data);
      updateLastActivity();
      setStatus(data.status);
    };

    const handleProgress = (
      data: BattleWebSocketEvents[BattleSocketEventKey.PROGRESS]
    ) => {
      console.log("üìä [PROGRESS] ÏßÑÌñâ ÏÉÅÌô© ÏàòÏã†:", data);
      updateLastActivity();
      setProgress(data);
    };

    const handleNext = (
      data: BattleWebSocketEvents[BattleSocketEventKey.NEXT_QUESTION]
    ) => {
      console.log("‚ùì [NEXT_QUESTION] Îã§Ïùå Î¨∏Ï†ú ÏàòÏã†:", data);
      updateLastActivity();
      setNextQuestion(data);
    };

    const handleResult = (
      data: BattleWebSocketEvents[BattleSocketEventKey.RESULT]
    ) => {
      console.log("üìù [RESULT] Ï†ïÎãµ Í≤∞Í≥º ÏàòÏã†:", data);
      updateLastActivity();
      setResult(data);
    };

    const handleEnd = (
      data: BattleWebSocketEvents[BattleSocketEventKey.END]
    ) => {
      console.log("üèÅ [END] Î∞∞ÌãÄ Ï¢ÖÎ£å ÏàòÏã†:", data);
      updateLastActivity();
      setEndPayload(data);
    };

    const handleError = (
      data: BattleWebSocketEvents[BattleSocketEventKey.ERROR]
    ) => {
      console.error("‚ùå [ERROR] ÏóêÎü¨ ÏàòÏã†:", data);
      updateLastActivity();
      alert(data);
    };

    const initSocket = async () => {
      try {
        console.log("üåê WebSocket Ïó∞Í≤∞ ÏãúÎèÑ Ï§ë...");
        await battleWebSocketService.connect(roomId, userId);
        console.log("‚úÖ WebSocket Ïó∞Í≤∞ ÏÑ±Í≥µ");

        battleWebSocketService.on(
          BattleSocketEventKey.PARTICIPANTS,
          handleParticipants
        );
        battleWebSocketService.on(BattleSocketEventKey.READY, handleReady);
        battleWebSocketService.on(BattleSocketEventKey.START, handleStart);
        battleWebSocketService.on(BattleSocketEventKey.STATUS, handleStatus);
        battleWebSocketService.on(
          BattleSocketEventKey.PROGRESS,
          handleProgress
        );
        battleWebSocketService.on(
          BattleSocketEventKey.NEXT_QUESTION,
          handleNext
        );
        battleWebSocketService.on(BattleSocketEventKey.RESULT, handleResult);
        battleWebSocketService.on(BattleSocketEventKey.END, handleEnd);
        battleWebSocketService.on(BattleSocketEventKey.ERROR, handleError);
      } catch (error) {
        console.error("‚ùå WebSocket Ï¥àÍ∏∞Ìôî Ïã§Ìå®:", error);
      }
    };

    initSocket();

    return () => {
      // console.log("üëã WebSocket Ïó∞Í≤∞ Ï¢ÖÎ£å Î∞è Ìï∏Îì§Îü¨ Ìï¥Ï†ú");
      // battleWebSocketService.off(BattleSocketEventKey.PARTICIPANTS);
      // battleWebSocketService.off(BattleSocketEventKey.START);
      // battleWebSocketService.off(BattleSocketEventKey.STATUS);
      // battleWebSocketService.off(BattleSocketEventKey.PROGRESS);
      // battleWebSocketService.off(BattleSocketEventKey.NEXT_QUESTION);
      // battleWebSocketService.off(BattleSocketEventKey.RESULT);
      // battleWebSocketService.off(BattleSocketEventKey.END);
      // battleWebSocketService.off(BattleSocketEventKey.ERROR);
      // battleWebSocketService.disconnect();
      // resetStore();
    };
  }, [
    roomId,
    userId,
    router,
    setParticipantsPayload,
    setStartPayload,
    setStatus,
    setProgress,
    setNextQuestion,
    setResult,
    setEndPayload,
    resetStore,
    updateLastActivity,
  ]);
};
