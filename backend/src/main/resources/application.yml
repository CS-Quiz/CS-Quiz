spring:
  # 프로필 활성화 설정
  profiles:
    active: local

  # 데이터소스 설정
  datasource:
    url: jdbc:postgresql://localhost:5432/quiz_db
    username: quizuser
    password: quizpass
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      max-lifetime: 1200000
      auto-commit: false

  # JPA 설정
  jpa:
    hibernate:
      ddl-auto: update  # 개발 환경에서 사용
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          time_zone: Asia/Seoul
        # 성능 최적화 설정
        jdbc.batch_size: 50
        order_inserts: true
        order_updates: true
        default_batch_fetch_size: 100  # 최적의 성능을 위해 100으로 조정
        # 추가 성능 최적화 설정
        query.in_clause_parameter_padding: true  # IN 절 파라미터 패딩 최적화
        query.plan_cache_max_size: 2048  # 쿼리 계획 캐시 크기 최적화
        query.plan_parameter_metadata_max_size: 128  # 최적화된 파라미터 메타데이터 크기 
        connection.provider_disables_autocommit: true  # 불필요한 autocommit 비활성화
        # 통계 활성화 (개발 환경에서만 사용 권장)
        generate_statistics: ${HIBERNATE_STATISTICS:false}  # 성능 측정 시에만 true로 설정
    open-in-view: false  # OSIV 비활성화 (영속성 컨텍스트의 트랜잭션 범위 제한)

  # Redis 설정
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 10000
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 2
          max-wait: -1ms

  # Elasticsearch 설정
  elasticsearch:
    uris: http://localhost:9200
    connection-timeout: 5s
    socket-timeout: 3s

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "http://ec2-13-125-187-28.ap-northeast-2.compute.amazonaws.com/api/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile

          github:
            client-id: ${GITHUB_CLIENT_ID}
            client-secret: ${GITHUB_CLIENT_SECRET}
            redirect-uri: "http://ec2-13-125-187-28.ap-northeast-2.compute.amazonaws.com/api/oauth2/callback/{registrationId}"
            scope:
              - user:email
              - read:user

          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: "http://ec2-13-125-187-28.ap-northeast-2.compute.amazonaws.com/api/oauth2/callback/{registrationId}"
            authorization-grant-type: authorization_code
            client-authentication-method: POST
            client-name: Kakao
            scope:
              - profile_nickname
              - profile_image
              - account_email

        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
            
  # 캐시 설정
  cache:
    caffeine:
      spec: maximumSize=1000,expireAfterWrite=600s,recordStats
    type: caffeine
    
  # MVC 설정
  mvc:
    content-negotiation:
      favor-parameter: false
      media-types:
        json: application/json
      default-content-type: application/json

app:
  oauth2:
    authorized-redirect-uri: ${OAUTH2_AUTHORIZED_REDIRECT_URI:http://ec2-13-125-187-28.ap-northeast-2.compute.amazonaws.com/api/oauth2/redirect}


# 서버 설정
server:
  address: 0.0.0.0  # Docker 컨테이너에서 외부 접근 허용
  port: 8080
  servlet:
    context-path: /
  tomcat:
    max-threads: 200
    accept-count: 100
    connection-timeout: 5s

# 로깅 설정
logging:
  level:
    root: INFO
    com.quizplatform: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.cache: TRACE
    org.springframework.data.elasticsearch.client.WIRE: TRACE

# JWT 설정
jwt:
  secret: ${JWT_SECRET:AbCdEfGhIjKlMnOpQrStUvWxYz1234567890AbCdEfGhIjKlMnOpQrStUvWxYz}  # 개발 환경에서만 사용하세요
  access-token-validity: 3600000  # 1시간
  refresh-token-validity: 1209600000  # 2주

# 애플리케이션 캐시 설정
cache:
  quiz:
    ttl: 3600  # 1시간
  user:
    ttl: 1800  # 30분

# 모니터링 엔드포인트 설정
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always

# API 문서 설정
springdoc:
  swagger-ui:
    path: /swagger-ui.html  # Swagger UI 경로 설정
    groups-order: DESC
    operationsSorter: method
#    disable-swagger-default-url: true
  api-docs:
    path: /api-docs  # API 문서 JSON 경로
  show-actuator: false  # Actuator 엔드포인트 문서화 비활성화
  default-consumes-media-type: application/json
  default-produces-media-type: application/json
  paths-to-match:
    - /api/**
